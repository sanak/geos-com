<?xml version="1.0"?>
<package>
<job>
<script language="JScript" src="common.js"/>
<script language="JScript">

function TestIo() {
};

TestIo.prototype.dec2Hex = function(dec) {
	dec = parseInt(dec, 10);
	if (isNaN(dec)) {
		return NaN;
	}
	var hexChars = "0123456789ABCDEF";
	var i = dec % 16;
	var j = (dec - i) / 16;
	return hexChars.charAt(j) + hexChars.charAt(i);
};

TestIo.prototype.check = function(wkt, ndrHexIn, xdrHexIn) {
	var geos = WScript.CreateObject("geos.geos");
	var wktReader = geos.WktReader.new_WktReader();
	var geom1 = wktReader.read(wkt);
	
	var wkbReader = geos.WkbReader.new_WkbReader();
	var geom2 = wkbReader.readHex(ndrHexIn);
	var geom3 = wkbReader.readHex(xdrHexIn);
	
	assertEqual(true, geom1.equals(geom2), "geom1.equals(geom2)");
	assertEqual(true, geom1.equals(geom3), "geom1.equals(geom3)");
	assertEqual(true, geom2.equals(geom3), "geom2.equals(geom3)");
	
	var wkbWriter = geos.WkbWriter.new_WkbWriter();
	wkbWriter.setByteOrder(geos.GEOS_WKB_NDR);
	var ndrHexOut = wkbWriter.writeHex(geom1);
	assertEqual(ndrHexIn, ndrHexOut, "ndrHexIn, ndrHexOut");
	
	var ndrBinOut = wkbWriter.write(geom1).toArray();
	var ndrBinOutStr = "";
	for (var ndrIdx = 0; ndrIdx != ndrBinOut.length; ndrIdx++) {
		ndrBinOutStr += this.dec2Hex(ndrBinOut[ndrIdx]);
	}
	
	assertEqual(ndrHexIn, ndrBinOutStr, "ndrHexIn, ndrBinOutStr");
	
	wkbWriter.setByteOrder(geos.GEOS_WKB_XDR);
	var xdrHexOut = wkbWriter.writeHex(geom1);
	assertEqual(xdrHexIn, xdrHexOut, "xdrHexIn, xdrHexOut");
	
	var xdrBinOut = wkbWriter.write(geom1).toArray();
	var xdrBinOutStr = "";
	for (var xdrIdx = 0; xdrIdx != xdrBinOut.length; xdrIdx++) {
		xdrBinOutStr += this.dec2Hex(xdrBinOut[xdrIdx]);
	}
	
	assertEqual(xdrHexIn, xdrBinOutStr, "xdrHexIn, xdrBinOutStr");
	
	return geom1;
};

TestIo.prototype.testOutputDimension = function() {
	WScript.Echo("testOutputDimension");
	
	var writer = geos.WkbWriter.new_WkbWriter();
	assertEqual(2, writer.getOutputDimension(), "writer.getOutputDimension()");
	
	writer.setOutputDimension(3);
	assertEqual(3, writer.getOutputDimension(), "writer.getOutputDimension()");
	
	report();
};

TestIo.prototype.testByteOrder = function() {
	WScript.Echo("testByteOrder");
	
	var writer = geos.WkbWriter.new_WkbWriter();
	assertEqual(geos.GEOS_WKB_NDR, writer.getByteOrder(), "writer.getByteOrder()");
	
	writer.setByteOrder(geos.GEOS_WKB_XDR);
	assertEqual(geos.GEOS_WKB_XDR, writer.getByteOrder(), "writer.getByteOrder()");
	
	writer.setByteOrder(geos.GEOS_WKB_NDR);
	assertEqual(geos.GEOS_WKB_NDR, writer.getByteOrder(), "writer.getByteOrder()");
	
	report();
};

TestIo.prototype.testPoint = function() {
	WScript.Echo("testPoint");
	
	var wkt = "POINT(0 0)";
	var ndr = "010100000000000000000000000000000000000000";
	var xdr = "000000000100000000000000000000000000000000";
	
	var geom = this.check(wkt, ndr, xdr);
//	assertEqual("IPoint", typeof(geom), "typeof(geom)"); // TODO: always "object"
	assertEqual("Point", geom.geomType(), "geom.geomType()");
	assertEqual(geos.GEOS_POINT, geom.typeId(), "geom.typeId()");
	
	report();
};

TestIo.prototype.testLineString = function() {
	WScript.Echo("testLineString");
	
	var wkt = "LINESTRING(1 2, 3 4)";
	var ndr = "010200000002000000000000000000F03F000000000000004000000000000008400000000000001040";
	var xdr = "0000000002000000023FF0000000000000400000000000000040080000000000004010000000000000";
	
	var geom = this.check(wkt, ndr, xdr);
//	assertEqual("ILineString", typeof(geom), "typeof(geom)"); // TODO: always "object"
	assertEqual("LineString", geom.geomType(), "geom.geomType()");
	assertEqual(geos.GEOS_LINESTRING, geom.typeId(), "geom.typeId()");
	
	report();
};

TestIo.prototype.testPolygon = function() {
	WScript.Echo("testPolygon");
	
	var wkt = "POLYGON((0 0, 10 0, 10 10, 0 10, 0 0),(2 2, 2 6, 6 4, 2 2))";
	var ndr = "0103000000020000000500000000000000000000000000000000000000000000000000244000000000000000000000000000002440000000000000244000000000000000000000000000002440000000000000000000000000000000000400000000000000000000400000000000000040000000000000004000000000000018400000000000001840000000000000104000000000000000400000000000000040";
	var xdr = "0000000003000000020000000500000000000000000000000000000000402400000000000000000000000000004024000000000000402400000000000000000000000000004024000000000000000000000000000000000000000000000000000440000000000000004000000000000000400000000000000040180000000000004018000000000000401000000000000040000000000000004000000000000000";
	
	var geom = this.check(wkt, ndr, xdr);
//	assertEqual("IPolygon", typeof(geom), "typeof(geom)"); // TODO: always "object"
	assertEqual("Polygon", geom.geomType(), "geom.geomType()");
	assertEqual(geos.GEOS_POLYGON, geom.typeId(), "geom.typeId()");
	
	report();
};

TestIo.prototype.testMultiPoint = function() {
	WScript.Echo("testMultiPoint");
	
	var wkt = "MULTIPOINT(0 0, 10 0, 10 10, 0 10, 0 0)";
	var ndr = "010400000005000000010100000000000000000000000000000000000000010100000000000000000024400000000000000000010100000000000000000024400000000000002440010100000000000000000000000000000000002440010100000000000000000000000000000000000000";
	var xdr = "000000000400000005000000000100000000000000000000000000000000000000000140240000000000000000000000000000000000000140240000000000004024000000000000000000000100000000000000004024000000000000000000000100000000000000000000000000000000";
	
	var geom = this.check(wkt, ndr, xdr);
//	assertEqual("IMultiPoint", typeof(geom), "typeof(geom)"); // TODO: always "object"
	assertEqual("MultiPoint", geom.geomType(), "geom.geomType()");
	assertEqual(geos.GEOS_MULTIPOINT, geom.typeId(), "geom.typeId()");
	
	report();
};

TestIo.prototype.testMultiLineString = function() {
	WScript.Echo("testMultiLineString");
	
	var wkt = "MULTILINESTRING((0 0, 10 0, 10 10, 0 10, 10 20),(2 2, 2 6, 6 4, 20 2))";
	var ndr = "010500000002000000010200000005000000000000000000000000000000000000000000000000002440000000000000000000000000000024400000000000002440000000000000000000000000000024400000000000002440000000000000344001020000000400000000000000000000400000000000000040000000000000004000000000000018400000000000001840000000000000104000000000000034400000000000000040";
	var xdr = "000000000500000002000000000200000005000000000000000000000000000000004024000000000000000000000000000040240000000000004024000000000000000000000000000040240000000000004024000000000000403400000000000000000000020000000440000000000000004000000000000000400000000000000040180000000000004018000000000000401000000000000040340000000000004000000000000000";
	
	var geom = this.check(wkt, ndr, xdr);
//	assertEqual("IMultiLineString", typeof(geom), "typeof(geom)"); // TODO: always "object"
	assertEqual("MultiLineString", geom.geomType(), "geom.geomType()");
	assertEqual(geos.GEOS_MULTILINESTRING, geom.typeId(), "geom.typeId()");
	
	report();
};

TestIo.prototype.testMultiPolygon = function() {
	WScript.Echo("testMultiPolygon");
	
	var wkt = "MULTIPOLYGON(((0 0, 10 0, 10 10, 0 10, 0 0),(2 2, 2 6, 6 4, 2 2)),((60 60, 60 50, 70 40, 60 60)))";
	var ndr
	var xdr
	
	var geom = this.check(wkt, ndr, xdr);
//	assertEqual("IMultiPolygon", typeof(geom), "typeof(geom)"); // TODO: always "object"
	assertEqual("MultiPolygon", geom.geomType(), "geom.geomType()");
	assertEqual(geos.GEOS_MULTIPOLYGON, geom.typeId(), "geom.typeId()");
	
	report();
};

TestIo.prototype.testCollection = function() {
	WScript.Echo("testCollection");
	
	wkt = "GEOMETRYCOLLECTION(POINT(0 0),LINESTRING(1 2,3 4),POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 6,6 4,2 2)),MULTIPOINT(0 0,10 0,10 10,0 10,0 0),MULTILINESTRING((0 0,10 0,10 10,0 10,10 20),(2 2,2 6,6 4,20 2)),MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0),(2 2,2 6,6 4,2 2)),((60 60,60 50,70 40,60 60))))";
	ndr
	xdr
	
	var geom = this.check(wkt, ndr, xdr);
//	assertEqual("IGeometryCollection", typeof(geom), "typeof(geom)"); // TODO: always "object"
	assertEqual("GeometryCollection", geom.geomType(), "geom.geomType()");
	assertEqual(geos.GEOS_GEOMETRYCOLLECTION, geom.typeId(), "geom.typeId()");
	
	report();
};

TestIo.prototype.testWktInvalid = function() {
	WScript.Echo("testWktInvalid");
	
	var reader = geos.WktReader.new_WktReader();
	var geom = reader.read("invalid");
	
	report();
};

TestIo.prototype.testWkbInvalid = function() {
	WScript.Echo("testWkbInvalid");
	
	var reader = geos.WkbReader.new_WkbReader();
	var geom = reader.read("invalid");
	
	report();
};

TestIo.prototype.testHexInvalid = function() {
	WScript.Echo("testHexInvalid");
	
	var reader = geos.WkbReader.new_WkbReader();
	var geom = reader.readHex("invalid");
	
	report();
};

var test = new TestIo();
test.testOutputDimension();
test.testByteOrder();
test.testPoint();
test.testLineString();
test.testPolygon();
test.testMultiPoint();
test.testMultiLineString();
test.testMultiPolygon();
//test.testCollection(); ' TODO:
//test.testWktInvalid();
//test.testWkbInvalid();
//test.testHexInvalid();
</script>
</job>
</package>
