<?xml version="1.0"?>
<package>
<job>
<script language="VBScript" src="common.vbs"/>
<script language="VBScript">
Option Explicit

Class TestIo
	Function check(wkt, ndrHexIn, xdrHexIn)
		Dim geos
		Set geos = WScript.CreateObject("geos.geos")
		Dim wktReader
		Set wktReader = geos.WktReader.new_WktReader()
		Dim geom1
		Set geom1 = wktReader.read(wkt)
		
		Dim wkbReader
		Set wkbReader = geos.WkbReader.new_WkbReader()
		Dim geom2
		Set geom2 = wkbReader.readHex(ndrHexIn)
		Dim geom3
		Set geom3 = wkbReader.readHex(xdrHexIn)
		
		assertEqual True, geom1.equals(geom2), "geom1.equals(geom2)"
		assertEqual True, geom1.equals(geom3), "geom1.equals(geom3)"
		assertEqual True, geom2.equals(geom3), "geom2.equals(geom3)"
		
		Dim wkbWriter
		Set wkbWriter = geos.WkbWriter.new_WkbWriter()
		wkbWriter.setByteOrder geos.GEOS_WKB_NDR
		Dim ndrHexOut
		ndrHexOut = wkbWriter.writeHex(geom1)
		assertEqual ndrHexIn, ndrHexOut, "ndrHexIn, ndrHexOut"
		
		Dim ndrBinOut
		ndrBinOut = wkbWriter.write(geom1)
		Dim ndrIdx, ndrBinOutStr
		ndrBinOutStr = ""
		For ndrIdx = LBound(ndrBinOut) To UBound(ndrBinOut)
			ndrBinOutStr = ndrBinOutStr + Hex(ndrBinOut(ndrIdx) \ 16) + Hex(ndrBinOut(ndrIdx) Mod 16)
		Next
		assertEqual ndrHexIn, ndrBinOutStr, "ndrHexIn, ndrBinOutStr"
		
		wkbWriter.setByteOrder geos.GEOS_WKB_XDR
		Dim xdrHexOut
		xdrHexOut = wkbWriter.writeHex(geom1)
		assertEqual xdrHexIn, xdrHexOut, "xdrHexIn, xdrHexOut"
		
		Dim xdrBinOut
		xdrBinOut = wkbWriter.write(geom1)
		Dim xdrIdx, xdrBinOutStr
		xdrBinOutStr = ""
		For xdrIdx = LBound(xdrBinOut) To UBound(xdrBinOut)
			xdrBinOutStr = xdrBinOutStr + Hex(xdrBinOut(xdrIdx) \ 16) + Hex(xdrBinOut(xdrIdx) Mod 16)
		Next
		assertEqual xdrHexIn, xdrBinOutStr, "xdrHexIn, xdrBinOutStr"
		
		Set check = geom1
	End Function
	
	Sub testOutputDimension()
		WScript.Echo "testOutputDimension"
		
		Dim writer
		Set writer = geos.WkbWriter.new_WkbWriter()
		assertEqual 2, writer.getOutputDimension, "writer.getOutputDimension"
		
		writer.setOutputDimension 3
		assertEqual 3, writer.getOutputDimension, "writer.getOutputDimension"
		
		report
	End Sub

	Sub testByteOrder()
		WScript.Echo "testByteOrder"
		
		Dim writer
		Set writer = geos.WkbWriter.new_WkbWriter()
		assertEqual geos.GEOS_WKB_NDR, writer.getByteOrder, "writer.getByteOrder"
		
		writer.setByteOrder geos.GEOS_WKB_XDR
		assertEqual geos.GEOS_WKB_XDR, writer.getByteOrder, "writer.getByteOrder"
		
		writer.setByteOrder geos.GEOS_WKB_NDR
		assertEqual geos.GEOS_WKB_NDR, writer.getByteOrder, "writer.getByteOrder"
		
		report
	End Sub

	Sub testPoint()
		WScript.Echo "testPoint"
		
		Dim wkt, ndr, xdr
		wkt = "POINT(0 0)"
		ndr = "010100000000000000000000000000000000000000"
		xdr = "000000000100000000000000000000000000000000"
		
		Dim geom
		Set geom = check(wkt, ndr, xdr)
		assertEqual "IPoint", TypeName(geom), "TypeName(geom)"
		assertEqual "Point", geom.geomType, "geom.geomType"
		assertEqual geos.GEOS_POINT, geom.typeId, "geom.typeId"
		
		report
	End Sub

	Sub testLineString()
		WScript.Echo "testLineString"
		
		Dim wkt, ndr, xdr
		wkt = "LINESTRING(1 2, 3 4)"
		ndr = "010200000002000000000000000000F03F000000000000004000000000000008400000000000001040"
		xdr = "0000000002000000023FF0000000000000400000000000000040080000000000004010000000000000"
		
		Dim geom
		Set geom = check(wkt, ndr, xdr)
		assertEqual "ILineString", TypeName(geom), "TypeName(geom)"
		assertEqual "LineString", geom.geomType, "geom.geomType"
		assertEqual geos.GEOS_LINESTRING, geom.typeId, "geom.typeId"
		
		report
	End Sub

	Sub testPolygon()
		WScript.Echo "testPolygon"
		
		Dim wkt, ndr, xdr
		wkt = "POLYGON((0 0, 10 0, 10 10, 0 10, 0 0),(2 2, 2 6, 6 4, 2 2))"
		ndr = "0103000000020000000500000000000000000000000000000000000000000000000000244000000000000000000000000000002440000000000000244000000000000000000000000000002440000000000000000000000000000000000400000000000000000000400000000000000040000000000000004000000000000018400000000000001840000000000000104000000000000000400000000000000040"
		xdr = "0000000003000000020000000500000000000000000000000000000000402400000000000000000000000000004024000000000000402400000000000000000000000000004024000000000000000000000000000000000000000000000000000440000000000000004000000000000000400000000000000040180000000000004018000000000000401000000000000040000000000000004000000000000000"
		
		Dim geom
		Set geom = check(wkt, ndr, xdr)
		assertEqual "IPolygon", TypeName(geom), "TypeName(geom)"
		assertEqual "Polygon", geom.geomType, "geom.geomType"
		assertEqual geos.GEOS_POLYGON, geom.typeId, "geom.typeId"
		
		report
	End Sub

	Sub testMultiPoint()
		WScript.Echo "testMultiPoint"
		
		Dim wkt, ndr, xdr
		wkt = "MULTIPOINT(0 0, 10 0, 10 10, 0 10, 0 0)"
		ndr = "010400000005000000010100000000000000000000000000000000000000010100000000000000000024400000000000000000010100000000000000000024400000000000002440010100000000000000000000000000000000002440010100000000000000000000000000000000000000"
		xdr = "000000000400000005000000000100000000000000000000000000000000000000000140240000000000000000000000000000000000000140240000000000004024000000000000000000000100000000000000004024000000000000000000000100000000000000000000000000000000"
		
		Dim geom
		Set geom = check(wkt, ndr, xdr)
		assertEqual "IMultiPoint", TypeName(geom), "TypeName(geom)"
		assertEqual "MultiPoint", geom.geomType, "geom.geomType"
		assertEqual geos.GEOS_MULTIPOINT, geom.typeId, "geom.typeId"
		
		report
	End Sub

	Sub testMultiLineString()
		WScript.Echo "testMultiLineString"
		
		Dim wkt, ndr, xdr
		wkt = "MULTILINESTRING((0 0, 10 0, 10 10, 0 10, 10 20),(2 2, 2 6, 6 4, 20 2))"
		ndr = "010500000002000000010200000005000000000000000000000000000000000000000000000000002440000000000000000000000000000024400000000000002440000000000000000000000000000024400000000000002440000000000000344001020000000400000000000000000000400000000000000040000000000000004000000000000018400000000000001840000000000000104000000000000034400000000000000040"
		xdr = "000000000500000002000000000200000005000000000000000000000000000000004024000000000000000000000000000040240000000000004024000000000000000000000000000040240000000000004024000000000000403400000000000000000000020000000440000000000000004000000000000000400000000000000040180000000000004018000000000000401000000000000040340000000000004000000000000000"
		
		Dim geom
		Set geom = check(wkt, ndr, xdr)
		assertEqual "IMultiLineString", TypeName(geom), "TypeName(geom)"
		assertEqual "MultiLineString", geom.geomType, "geom.geomType"
		assertEqual geos.GEOS_MULTILINESTRING, geom.typeId, "geom.typeId"
		
		report
	End Sub

	Sub testMultiPolygon()
		WScript.Echo "testMultiPolygon"
		
		Dim wkt, ndr, xdr
		wkt = "MULTIPOLYGON(((0 0, 10 0, 10 10, 0 10, 0 0),(2 2, 2 6, 6 4, 2 2)),((60 60, 60 50, 70 40, 60 60)))"
		ndr = "0106000000020000000103000000020000000500000000000000000000000000000000000000000000000000244000000000000000000000000000002440000000000000244000000000000000000000000000002440000000000000000000000000000000000400000000000000000000400000000000000040000000000000004000000000000018400000000000001840000000000000104000000000000000400000000000000040010300000001000000040000000000000000004E400000000000004E400000000000004E400000000000004940000000000080514000000000000044400000000000004E400000000000004E40"
		xdr = "000000000600000002000000000300000002000000050000000000000000000000000000000040240000000000000000000000000000402400000000000040240000000000000000000000000000402400000000000000000000000000000000000000000000000000044000000000000000400000000000000040000000000000004018000000000000401800000000000040100000000000004000000000000000400000000000000000000000030000000100000004404E000000000000404E000000000000404E000000000000404900000000000040518000000000004044000000000000404E000000000000404E000000000000"
		
		Dim geom
		Set geom = check(wkt, ndr, xdr)
		assertEqual "IMultiPolygon", TypeName(geom), "TypeName(geom)"
		assertEqual "MultiPolygon", geom.geomType, "geom.geomType"
		assertEqual geos.GEOS_MULTIPOLYGON, geom.typeId, "geom.typeId"
		
		report
	End Sub

	Sub testCollection()
		WScript.Echo "testCollection"
		
		Dim wkt, ndr, xdr
		wkt = "GEOMETRYCOLLECTION(POINT(0 0),LINESTRING(1 2,3 4),POLYGON((0 0,10 0,10 10,0 10,0 0),(2 2,2 6,6 4,2 2)),MULTIPOINT(0 0,10 0,10 10,0 10,0 0),MULTILINESTRING((0 0,10 0,10 10,0 10,10 20),(2 2,2 6,6 4,20 2)),MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0),(2 2,2 6,6 4,2 2)),((60 60,60 50,70 40,60 60))))"
		ndr
		xdr
		
		Dim geom
		Set geom = check(wkt, ndr, xdr)
		assertEqual "IGeometryCollection", TypeName(geom), "TypeName(geom)"
		assertEqual "GeometryCollection", geom.geomType, "geom.geomType"
		assertEqual geos.GEOS_GEOMETRYCOLLECTION, geom.typeId, "geom.typeId"
		
		report
	End Sub

	Sub testWktInvalid()
		WScript.Echo "testWktInvalid"
		
		Dim reader
		Set reader = geos.WktReader.new_WktReader()
		Dim geom
		Set geom = reader.read("invalid")
		
		report
	End Sub

	Sub testWkbInvalid()
		WScript.Echo "testWkbInvalid"
		
		Dim reader
		Set reader = geos.WkbReader.new_WkbReader()
		Dim geom
		Set geom = reader.read("invalid")
		
		report
	End Sub

	Sub testHexInvalid()
		WScript.Echo "testHexInvalid"
		
		Dim reader
		Set reader = geos.WkbReader.new_WkbReader()
		Dim geom
		Set geom = reader.readHex("invalid")
		
		report
	End Sub
End Class

Dim test
Set test = New TestIo
test.testOutputDimension
test.testByteOrder
test.testPoint
test.testLineString
test.testPolygon
test.testMultiPoint
test.testMultiLineString
test.testMultiPolygon
'test.testCollection ' TODO:
'test.testWktInvalid
'test.testWkbInvalid
'test.testHexInvalid
</script>
</job>
</package>
